
// 实际运行
// statement
// 程序里面，只有statement会被执行
// statement
var myvar : MyStruct = MyStruct()
// statement
print(myvar[10])
// statement
myvar[10] = 5

// define 模版
struct MyStruct {
    subscript(index : Int) -> Int {
        set(newValue){
            // statement
            print(newValue)
            // statement
            print(index)
        }
        get{
            // statement
            return index * 10
        }
    }
}

// Array[1]
/// Accesses the element at the specified position.
///
/// The following example uses indexed subscripting to update an array's
/// second element. After assigning the new value (`"Butler"`) at a specific
/// position, that value is immediately available at that same position.
///
///     var streets = ["Adams", "Bryant", "Channing", "Douglas", "Evarts"]
///     streets[1] = "Butler"
///     print(streets[1])
///     // Prints "Butler"

Classes, structures, and enumerations can define subscripts

// 继承(DNA)
// 1.: 扩展
// 2. override
// 親クラス、子クラス


// In Swift language, we have Structs, Enum and Classes. Struct and Enum are passed by copy but Classes are passed by reference. Only Classes support inheritance, Enum and Struct don't.
// 親クラス
class MyEnumFather {
    static var age : Int = 0
}

// 子クラス
class MyEnumChild : MyEnumFather {
}

print(MyEnumChild.age)

// 親クラス
class MyEnumMother {
    // computed properties
    var age : Int {
        get {
            return 30
        }
        set(newValue) {
            
        }
    }
    
    func getAge() -> Int {
        return 30
    }
}

// 子クラス
class MyEnumDaughter : MyEnumMother {
    // 重写
    override var age: Int {
        get {
            return 3
        }
        set{
            
        }
    }
    // 重写
    override func getAge() -> Int {
        return 3
    }
}

print(MyEnumMother().age)
print(MyEnumDaughter().age)
print(MyEnumMother().getAge())
print(MyEnumDaughter().getAge())

