var stringText : String = "test \"\\test"
var charText : Character = "a"

print(stringText)
print(charText)

let quotation = "\""
print(quotation)
let quotation1 = "'"
let quotation2 = "*"
let quotation3 = "\\"
print(quotation3)

// escaped special characters list:
// \0
// \\
// \t ->制表符
// \n ->line feed
// \r ->carriage return
// \"
// \'

// Unicode
let unicodeTest = "\u{22220}"
print(unicodeTest)

//: Playground - noun: a place where people can play

import UIKit
// 直接声明
var emptyString = "abc"
// 利用函数产生一个字符串
var emptyString2 = String()

if emptyString != emptyString2 {
    print("they are not the same!")
}

if emptyString.isEmpty {
    print("this is empty!")
}

print(emptyString.count)

var variableString = "Horse"
variableString += " and carriage"
// variableString is now "Horse and carriage"

var constantString = "Highlander"
constantString += " and another Highlander"
// this reports a compile-time error - a constant string cannot be modified

// swift数据类型分类
// 1. 数值类型 Sting， Structure， Enumeration
// 2. 对象类型

let catCharacters: [Character] = ["C", "a", "t", "!", "🐱"]
// () -> 函数
let catString = String(catCharacters)
print(catCharacters)
print(catString)
print(catString.count)
// Prints "Cat!🐱"

var before = "aaa"
var after = "bbb"
var combined = before + after
print(combined)

before += "bbb"
// +=
// 1. +运算
// 2. 把值重新赋予自己

print(before)

var appendtest = "aaa"

appendtest.append("bbb")

print(appendtest)

let goodStart = """
one
dadasdasdads
dasdasdasdasdasd
two
"""

print(goodStart)

var greeting = "123456789"
print(greeting.startIndex.encodedOffset)
print(greeting.endIndex.encodedOffset)
print(greeting[greeting.startIndex])
print(greeting[greeting.index(before: greeting.endIndex)])
// (xxxx) 函数
// func -> function 函数
let indexTest = greeting.index(greeting.startIndex, offsetBy: 7)
print(greeting[indexTest])

// 1.index　インデックス
// 2.offset オフセット(based on index)
// [a][b][c](d:index 3)[e:offset 1][f:offset 2][g: offset 3][h][i][j]

// swift:[a],[b],[c]

for index in greeting.indices {
    print("\(greeting[index]) ", terminator: "")
}
print(greeting.indices.endIndex.encodedOffset)

// prefix
var demo = "aaabbbccc"
print(demo.hasPrefix("aaabbb"))

// suffix
print(demo.hasSuffix("bbccc"))

// 包含
print(demo.contains("a"))
print(demo.contains("b"))
print(demo.contains("c"))

// utf-8
var testUTF8 = "aadada"
for test in testUTF8.utf8 {
    print(test)
}

//  utf-16
for test in testUTF8.utf16 {
    print(test)
}

// unicode
for test in testUTF8.unicodeScalars {
    print(test.value)
}
